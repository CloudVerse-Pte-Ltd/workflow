on:
  workflow_call:
    inputs:
      SERVICE:
        type: string
        required: true
    secrets:
      GCP_CREDS:
        required: true
      SLACK_WEBHOOK:
        required: true
      GH_TOKEN:
        required: true

env:
  REGISTRY: asia-southeast1-docker.pkg.dev

jobs:
  InitInfo:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      environment: ${{ steps.environment.outputs.environment }}
      staging_image: ${{ steps.staging.outputs.staging_image }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - id: version
        run: |
          set -e
          echo "version=$(git describe --tags `git rev-list --tags --max-count=1`)-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          set +e
      - id: environment
        run: |
          [[ $GITHUB_REF_NAME == "main" ]] && echo "environment=dev" >> $GITHUB_OUTPUT || true
          [[ $GITHUB_REF_NAME == "test" ]] && echo "environment=test" >> $GITHUB_OUTPUT || true
          [[ $GITHUB_REF_NAME == "production" ]] && echo "environment=staging" >> $GITHUB_OUTPUT || true
          [[ $GITHUB_REF_TYPE == "tag" ]] && echo "environment=prod" >> $GITHUB_OUTPUT || true
      - if: github.ref_type == 'tag'
        uses: actions/checkout@v4
        with:
          repository: cloudVerse-Pte-Ltd/argocd
          ref: main
          token: ${{ secrets.GH_TOKEN }}
          path: argocd
      - if: github.ref_type == 'tag'
        id: staging
        run: |
          staging_image=`grep -r -e "image: [^ ]*:.*" argocd/staging/${{ inputs.SERVICE }} | awk '{print $3}' | cut -d ":" -f2`
          [[ staging_image = "" ]] && echo "Staging image not found" && exit 1
          echo "staging_image=${staging_image}" >> $GITHUB_OUTPUT

  Build:
    runs-on: ubuntu-latest
    needs: InitInfo
    outputs:
      version: ${{ steps.version.outputs.version }}
      environment: ${{ steps.environment.outputs.environment }}
    steps:
      - name: Slack notify start build
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: cloudverse-devops
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: ${{ job.status }}
          SLACK_TITLE: "`${{ inputs.SERVICE }}` build `started` on `${{ needs.InitInfo.outputs.environment }}`"
          SLACK_MESSAGE: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: 'google-github-actions/setup-gcloud@v2'
      - uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_CREDS }}'
      - name: Log in to the Container registry
        run: gcloud auth configure-docker asia-southeast1-docker.pkg.dev
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build docker container
        if: github.ref_type != 'tag'
        run: |
          IMAGE="asia-southeast1-docker.pkg.dev/cloudverse-foundation/${{ needs.InitInfo.outputs.environment }}/${{ inputs.SERVICE }}"
          docker buildx build --platform linux/amd64 --push -t ${IMAGE}:${{ needs.InitInfo.outputs.version }} \
            -t ${IMAGE}:latest .
      - name: Pull and tag image for production
        if: github.ref_type == 'tag'
        run: |
          IMAGE="asia-southeast1-docker.pkg.dev/cloudverse-foundation/${{ needs.InitInfo.outputs.environment }}/${{ inputs.SERVICE }}"
          STAGING_IMAGE="asia-southeast1-docker.pkg.dev/cloudverse-foundation/staging/${{ inputs.SERVICE }}"
          docker pull ${STAGING_IMAGE}:${{ needs.InitInfo.outputs.staging_image }}

          docker tag ${STAGING_IMAGE}:${{ needs.InitInfo.outputs.staging_image }} ${IMAGE}:${{ needs.InitInfo.outputs.version }}
          docker tag ${STAGING_IMAGE}:${{ needs.InitInfo.outputs.staging_image }} ${IMAGE}:latest

          docker push ${IMAGE}:${{ needs.InitInfo.outputs.version }}
          docker push ${IMAGE}:latest

      - name: Slack Notification Success
        if: ${{ success() }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: cloudverse-devops
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: ${{ job.status }}
          SLACK_TITLE: "`${{ inputs.SERVICE }}` build `success` on `${{ needs.InitInfo.outputs.environment }}`"
          SLACK_MESSAGE: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
      - name: Slack Notification Failure
        if: ${{ failure() }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: cloudverse-devops
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: ${{ job.status }}
          SLACK_TITLE: "`${{ inputs.SERVICE }}` build `failed` on `${{ needs.InitInfo.outputs.environment }}`"
          SLACK_MESSAGE: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
      - id: version
        run: |
          echo "version=${{ needs.InitInfo.outputs.version }}" >> $GITHUB_OUTPUT
      - id: environment
        run: |
          echo "environment=${{ needs.InitInfo.outputs.environment }}" >> $GITHUB_OUTPUT

  Deploy:
    runs-on: ubuntu-latest
    needs: Build
    env:
      version: ${{ needs.Build.outputs.version }}
      environment: ${{ needs.Build.outputs.environment }}
      service: ${{ inputs.SERVICE }}
      token: ${{ secrets.GH_TOKEN }}
    steps:
      - run: |
          curl -L \
          -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${token}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/CloudVerse-Pte-Ltd/argocd/actions/workflows/83931042/dispatches \
          -d '{"ref":"main","inputs":{"environment":"'"${environment}"'","service":"'"${service}"'","version": "'"${version}"'"}}'
      - name: Slack Notification Success
        if: ${{ success() }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: cloudverse-devops
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: ${{ job.status }}
          SLACK_TITLE: "`${{ inputs.SERVICE }}` deploy `started` on `${{ needs.Build.outputs.environment }}`"
          SLACK_MESSAGE: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
      - name: Slack Notification Failure
        if: ${{ failure() }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: cloudverse-devops
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: ${{ job.status }}
          SLACK_TITLE: "`${{ inputs.SERVICE }}` deploy `failed` on `${{ needs.Build.outputs.environment }}`"
          SLACK_MESSAGE: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
